\DOC cv_auto_trans

\TYPE {cv_auto_trans : thm -> unit}

\SYNOPSIS
Translates functional definitions to the {cv_compute} subset of HOL.

\LIBRARY
cv_transLib

\DESCRIBE
This is a recursive version of {cv_transLib.cv_trans}. If the
{cv_transLib.cv_trans}-translation of the given HOL function encounters an
untranslated constants, then {cv_transLib.cv_auto_trans} will call itself
recursively on each of the definition of the not-yet-translated constants.
The auto-functions are sometimes able to translate functions that mention
higher-order functions, such as {MAP}.

\FAILURE
When the translation produces a precondition that the automation is
unable prove automatically, or {cv_transLib.cv_termination_tac} is
insufficient for proving the termination goal of the translator-defined
{:cv} function. In case the termination goal is not proved, then the
problematic goal is pushed to the goal stack.

\EXAMPLE

{
> Definition list_add1_def:
  list_add1 xs = MAP SUC xs
End
Definition has been stored under "list_add1_def"
val list_add1_def = ⊢ ∀xs. list_add1 xs = MAP SUC xs: thm
> cv_auto_trans list_add1_def;
Equations stored under "cv_MAP_SUC_def".
Induction stored under "cv_MAP_SUC_ind".
Finished translating MAP_SUC, stored in cv_MAP_SUC_thm
Finished translating list_add1, stored in cv_list_add1_thm
val it = (): unit
> cv_eval “list_add1 [5; 6; 7]”;
val it = ⊢ list_add1 [5; 6; 7] = [6; 7; 8]: thm
}

\COMMENTS
Designed to produce definitions suitable for evaluation by {cv_transLib.cv_eval}.

\SEEALSO
cv_transLib.cv_trans,
cv_transLib.cv_trans_pre,
cv_transLib.cv_trans_pre_rec,
cv_transLib.cv_trans_rec,
cv_transLib.cv_auto_trans,
cv_transLib.cv_auto_trans_pre,
cv_transLib.cv_auto_trans_pre_rec,
cv_transLib.cv_auto_trans_rec,
cv_transLib.cv_eval,
cv_transLib.cv_termination_tac

\ENDDOC
